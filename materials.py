import numpy as npimport matplotlib.pyplot as pltfrom sklearn import linear_modelimport pandas as pdfrom tabulate import tabulateI_220_R = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000000011, 0.000000048, 0.00000013, 0.00000033, 0.000000864, 0.0000022, 0.0000059, 0.000017, 0.000049, 0.00012, 0.00023, 0.00038, 0.00053, 0.00071, 0.00089, 0.0011, 0.0013, 0.0015, 0.0016, 0.0018, 0.0019, 0.0022, 0.0025, 0.0027, 0.0029, 0.0031, 0.0033, 0.0035, 0.0037, 0.0039, 0.0041, 0.0043, 0.0045, 0.0047, 0.005])V_220_R = np.array([0.001, 0.045, 0.11, 0.16, 0.209, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.65, 1.69, 1.73, 1.76, 1.77, 1.79, 1.8, 1.81, 1.82, 1.83, 1.84, 1.85, 1.85, 1.86, 1.86, 1.87, 1.87, 1.88, 1.88, 1.89, 1.89, 1.89, 1.9, 1.91, 1.91, 1.91, 1.92, 1.92])I_220_A = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00000001,0.00000009,0.00000032,0.00000054,0.00000066,0.00000097,0.00000012,0.00000023,0.000033,0.000072,0.00016,0.00023,0.00043,0.00073,0.0009,0.001,0.0011,0.0013,0.0015,0.0017,0.0019,0.002,0.0023,0.0025,0.0027,0.0031,0.0033,0.0035,0.0036,0.0038,0.0039,0.004,0.0043,0.0046])V_220_A = np.array([0.011, 0.061, 0.82, 0.16, 0.21, 0.36, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.82, 1.87, 1.89, 1.9, 1.91, 1.91, 1.92, 1.93, 1.94, 1.94, 1.95, 1.96, 1.96, 1.97, 1.97, 1.98, 1.993, 1.996, 1.998, 2, 2.01, 2.03, 2.05, 2.06])I_220_V = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00000013,0.0000003,0.0000006,0.0000009,0.0000013,0.0000014,0.0000082,0.000032,0.00009,0.00012,0.00031,0.00042,0.00059,0.00073,0.00088,0.00099,0.0012,0.0014,0.0015,0.0017,0.0018,0.002,0.0022,0.0024,0.0025])V_220_V = np.array([0.012,0.061,0.11,0.16,0.209,0.26,0.31,0.36,0.41,0.46,0.51,0.56,0.61,0.66,0.71,0.76,0.81,0.86,0.91,0.96,1,1.06,1.11,1.16,1.21,1.26,1.31,1.36,1.41,1.46,1.51,1.56,1.61,1.66,1.71,1.76,1.81,1.83,1.89,1.96,2.01,2.05,2.11,2.17,2.19,2.23,2.24,2.26,2.28,2.3,2.32,2.34,2.35,2.36,2.38,2.39,2.4,2.41,2.43,2.44,2.45])I_220_Az = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00000002, 0.0000005, 0.0000003, 0.000001, 0.0000069, 0.0000095, 0.000154, 0.000298, 0.000312, 0.000421, 0.000489, 0.00065, 0.00074, 0.0009, 0.0013, 0.0015, 0.0017])V_220_Az = np.array([0.002,0.06,0.11,0.16,0.21,0.26,0.31,0.36,0.41,0.46,0.5,0.54,0.61,0.66,0.71,0.76,0.81,0.86,0.91,0.96,1,1.06,1.11,1.16,1.21,1.26,1.31,1.36,1.41,1.46,1.51,1.56,1.61,1.66,1.71,1.76,1.81,1.82,1.87,1.89,1.9,1.94,1.95,2.1,2.21,2.29,2.32,2.38,2.41,2.43,2.47,2.51,2.54,2.55,2.58,2.59,2.6,2.61,2.62,2.63,2.64])I_1k_R = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0.0000002,0.0000009,0.00000021,0.00000032,0.0000005,0.000009,0.000011,0.000029,0.000054,0.000072,0.000092,0.00016,0.00019,0.00026,0.00031,0.00034,0.00039,0.00042,0.00048,0.00051,0.00057,0.00062,0.00069,0.00073,0.00076,0.00083,0.00089,0.00091,0.00093,0.00095,0.00098,0.00099,0.001,0.0012])V_1k_R = np.array([0.003, 0.07, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.68, 1.69, 1.7, 1.72, 1.74, 1.74, 1.75, 1.76, 1.77, 1.77, 1.77, 1.78, 1.78, 1.79, 1.79, 1.79, 1.8, 1.8, 1.81, 1.81, 1.81, 1.82, 1.82, 1.83, 1.84, 1.84, 1.85])I_1k_A = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0.0000001, 0.0000007, 0.0000012, 0.0000024, 0.0000065, 0.0000077, 0.000012, 0.000022, 0.000043, 0.000055, 0.000061, 0.000087, 0.000091, 0.00012, 0.00014, 0.00022, 0.00034, 0.00041, 0.00052, 0.00053, 0.00063, 0.00068, 0.0007, 0.00076, 0.00079, 0.00082, 0.00083, 0.00089, 0.0009, 0.00091, 0.00093, 0.00095])V_1k_A = np.array([0.001, 0.07, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.82, 1.83, 1.83, 1.84, 1.86, 1.86, 1.87, 1.88, 1.89, 1.89, 1.91, 1.92, 1.923, 1.935, 1.945, 1.95, 1.961, 1.97, 1.974, 1.978, 1.981, 1.984, 1.99, 1.993])I_1k_V = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0.0000002, 0.0000006, 0.00000091, 0.0000012, 0.0000027, 0.0000041, 0.0000051, 0.0000068, 0.0000072, 0.0000081, 0.0000088, 0.000009, 0.000011, 0.000029, 0.000054, 0.000061, 0.000091, 0.00012, 0.000194, 0.00026, 0.00028, 0.00031, 0.00036, 0.00038, 0.00043, 0.00048, 0.00054, 0.00058, 0.00062, 0.00065, 0.000717])V_1k_V = np.array([0.004, 0.06, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.37, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.86, 1.91, 1.96, 2.01, 2.06, 2.1, 2.13, 2.18, 2.2, 2.2, 2.21, 2.22, 2.22, 2.23, 2.23, 2.25, 2.26, 2.26, 2.27, 2.28, 2.28, 2.29, 2.29, 2.3])I_1k_Az = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,000,0,0,0,0,0,0,0,0,0,0,0,0.000001, 0.000002, 0.000008, 0.000009, 0.000012, 0.000032, 0.000045, 0.000047, 0.000052, 0.000064, 0.000079, 0.000082, 0.000093, 0.0001, 0.00015, 0.00023, 0.00028, 0.00032, 0.00037, 0.000455])V_1k_Az = np.array([0.001, 0.04, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.86, 1.91, 1.96, 2.01, 2.06, 2.11, 2.19, 2.23, 2.3, 2.35, 2.38, 2.41, 2.43, 2.44, 2.45, 2.47, 2.5, 2.51, 2.51, 2.52, 2.54, 2.54, 2.55, 2.56])I_2k_R = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000003,0.000005,0.000007,0.000009,0.000011,0.000013,0.000015,0.000018,0.000021,0.000024,0.000027,0.000031,0.000052,0.000072,0.000092,0.000099,0.00011,0.000117,0.000123,0.00015,0.00016,0.00019,0.00021,0.00024,0.00026,0.00027,0.00032,0.00038,0.00039,0.00042,0.00052,0.0006,0.00064])V_2k_R = np.array([0.003,0.06,0.11,0.16,0.21,0.26,0.31,0.36,0.41,0.46,0.51,0.56,0.61,0.66,0.71,0.76,0.81,0.86,0.91,0.96,1.01,1.06,1.11,1.16,1.21,1.26,1.31,1.36,1.41,1.46,1.51,1.56,1.61,1.66,1.71,1.72,1.72,1.72,1.73,1.73,1.74,1.74,1.74,1.75,1.75,1.75,1.76,1.76,1.77,1.77,1.77,1.78,1.78,1.79,1.79,1.8,1.8,1.81,1.81,1.81,1.81])I_2k_A = np.array([0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0000012, 0.000023, 0.000032, 0.000054, 0.000081, 0.0001, 0.00011, 0.000122, 0.000122, 0.000149, 0.000151, 0.000163, 0.000168, 0.000172, 0.000174, 0.000176, 0.0002, 0.000239, 0.000273, 0.000309, 0.000348, 0.000352, 0.000372, 0.000391, 0.0004, 0.00042, 0.000437, 0.000456, 0.000487, 0.000599, 0.000541])V_2k_A = np.array([0.002, 0.07, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.86, 1.86, 1.88, 1.87, 1.87, 1.88, 1.88, 1.88, 1.89, 1.89, 1.89, 1.9, 1.9, 1.91, 1.92, 1.92, 1.93, 1.93, 1.93, 1.94, 1.94, 1.95, 1.95, 1.95])I_2k_V = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000002, 0.00003, 0.00007, 0.00013, 0.00015, 0.00018, 0.00019, 0.0002, 0.00022, 0.00025, 0.00029, 0.00032, 0.00035, 0.00036, 0.00037, 0.00038, 0.00039, 0.00041, 0.00041, 0.000411, 0.000412, 0.000413, 0.000414, 0.000414, 0.000415])V_2k_V = np.array([0.004, 0.06, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.37, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.86, 1.91, 1.96, 2.01, 2.06, 2.1, 2.13, 2.18, 2.2, 2.2, 2.21, 2.22, 2.22, 2.23, 2.23, 2.25, 2.26, 2.26, 2.27, 2.28, 2.28, 2.29, 2.29, 2.3])I_2k_Az = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,00,0,0,00,0,0,00,0,0,0,00,0.000017,0.000025,0.000027,0.000036,0.000049,0.000056,0.000060,0.000080,0.0001,0.00012,0.00014,0.00015,0.00017,0.000192,0.000203,0.000205,0.000208,0.000209,0.000213])V_2k_Az = np.array([0.001, 0.06, 0.11, 0.16, 0.21, 0.26, 0.31, 0.36, 0.41, 0.46, 0.51, 0.56, 0.61, 0.66, 0.71, 0.76, 0.81, 0.86, 0.91, 0.96, 1.01, 1.06, 1.11, 1.16, 1.21, 1.26, 1.31, 1.36, 1.41, 1.46, 1.51, 1.56, 1.61, 1.66, 1.71, 1.76, 1.81, 1.86, 1.91, 1.96, 2.01, 2.06, 2.11, 2.16, 2.21, 2.26, 2.31, 2.36, 2.39, 2.41, 2.42, 2.42, 2.43, 2.44, 2.45, 2.45, 2.46, 2.46, 2.47])"""plt.plot(V_220_R, I_220_R,"r")plt.plot(V_1k_R, I_1k_R, "firebrick" )plt.plot(V_2k_R, I_2k_R, "darkred" )plt.title("Voltaje vs. Corriente Leds de color rojo con diferente reistencias")plt.legend(['220 Ohms', '1k Ohms', "2k Ohms"])plt.plot(V_220_R, I_220_R,"r")plt.xlabel('Voltaje [Volts]')plt.ylabel('Corriente [A]')plt.title("Voltaje vs. Corriente con una resistencia de 220 ohms")plt.legend(['Led Rojo', 'Led Amarillo', "Led Verde", "Led Azul"])plt.plot(V_1k_R, I_1k_R, "firebrick" )plt.plot(V_1k_A, I_1k_A, "#ffd343")plt.plot(V_1k_V, I_1k_V,"lightgreen")plt.plot(V_1k_Az, I_1k_Az, "dodgerblue")plt.xlabel('Voltaje [Volts]')plt.ylabel('Corriente [A]')plt.title("Voltaje vs. Corriente con una resistencia de 1k ohms")plt.legend(['Led Rojo', 'Led Amarillo', "Led Verde", "Led Azul"])plt.plot(V_2k_R, I_2k_R, "darkred" )plt.plot(V_2k_A, I_2k_A, "yellow")plt.plot(V_2k_Az, I_2k_Az,"lightskyblue" )plt.plot(V_2k_V, I_2k_V, "lawngreen")plt.xlabel('Voltaje [Volts]')plt.ylabel('Corriente [A]')plt.title("Voltaje vs. Corriente con una resistencia de 2k ohms")plt.legend(['Led Rojo', 'Led Amarillo', "Led Verde", "Led Azul"])"""#linealizaci√≥n de datos def linealizacion (x_axis,y_axis,e):         i = 0    for every in range (0, len(x_axis)):        if y_axis[every] == 0:            i = every             x_array = x_axis[(i+e):]    y_array = y_axis[(i+e):]    table = {"Voltaje": x_array, "Corriente": y_array}        regression_model = linear_model.LinearRegression()    regression_model.fit(X =pd.DataFrame(x_array),y = y_array)    train_prediction = regression_model.predict(X = pd.DataFrame(x_array))    x_intercept = (- regression_model.intercept_) /regression_model.coef_    #print(tabulate(table, headers="keys", tablefmt="grid"))    #print("X intercept:" , x_intercept)    #print("coeficiente:", regression_model.coef_)    #print(regression_model.score(X = pd.DataFrame(x_array),y = y_array))        #plt.plot(x_array,train_prediction,  linestyle=(0, (1, 1)),color="black", )    return x_interceptdef linealizacion_2 (x_axis,y_axis):             regression_model = linear_model.LinearRegression()    regression_model.fit(X =pd.DataFrame(x_axis),y = y_axis)    train_prediction = regression_model.predict(X = pd.DataFrame(x_axis))    x_intercept = (- regression_model.intercept_) /regression_model.coef_        print("X intercept:" , x_intercept)    print("coeficiente:", regression_model.coef_)    print(regression_model.score(X = pd.DataFrame(x_axis),y = y_axis))        plt.plot(x_axis,train_prediction, linestyle=(0, (1, 1)),color="black")    return regression_model.coef_promedio_led_rojos = (1.6*10**-19)*(linealizacion(V_220_R, I_220_R,5)+ linealizacion(V_1k_R, I_1k_R,5) + linealizacion(V_2k_R,I_2k_R,5)) /3promedio_led_amarillo = (1.6*10**-19)*(linealizacion(V_220_A, I_220_A,5)+ linealizacion(V_1k_A, I_1k_A,5) + linealizacion(V_2k_A,I_2k_A,5)) /3promedio_led_Verde = (1.6*10**-19)*(linealizacion(V_220_V, I_220_V,5)+ linealizacion(V_1k_V, I_1k_V,5) + linealizacion(V_2k_V,I_2k_V,5)) /3promedio_led_AZUL = (1.6*10**-19)*(linealizacion(V_220_Az, I_220_Az,5)+ linealizacion(V_1k_Az, I_1k_Az,5) + linealizacion(V_2k_Az,I_2k_Az,5)) /3 l_f_r = 3*10**8/(700 *10**(-9))l_f_a = 3*10**8/(580*10**(-9))l_f_v = 3*10**8/(550*10**(-9))l_f_b =  3*10**8/(495*10**(-9))longitudes_de_onda = [l_f_r, l_f_a, l_f_v, l_f_b] promedio_leds = [promedio_led_rojos, promedio_led_amarillo, promedio_led_Verde, promedio_led_AZUL ]plt.scatter(longitudes_de_onda, promedio_leds )planck = linealizacion_2(longitudes_de_onda,promedio_leds)print(planck)porcentaje_error = abs(planck-(6.62607015*10**-34))/(6.62607015*10**-34)print (porcentaje_error)print("promedio")print(promedio_led_rojos,promedio_led_amarillo, promedio_led_Verde, promedio_led_AZUL)print(l_f_r,l_f_a,l_f_v,l_f_b )plt.xlabel('Frecuencia [Hertz]')plt.ylabel('Energ√≠a [J]')plt.figure(figsize=(30,30))plt.show()"""Apuntes: de que toca hacer:        4 valores promedio,  uno para cada color    inverso             voltaje mmultiplicar por la carga de un electron (Verlo en Julios )        por la velocidad de la luz () * 1/lambda"""